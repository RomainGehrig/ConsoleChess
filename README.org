* ConsoleChess
Toy project meant to be improved as I progress in Haskell

** Personal enjoyments about the project
- Use of the Lens library
- Happy about how the moves are generated (infinite stream for each possible direction then filtering)

** TODOs
+ Have internal (game mechanics and computations) and external (user point of view) coordinate systems
  - Enforced by the type system
  - Internal coordinate system should be simply queryable: "get e8" or "black pawnLine" or "1st column, 3rd row from white view point" => a3, "1st column, 3rd row from black view point" => h6
+ Move, PlacedPiece and Game datatypes are clumpsy to use and aren't good abstactions
  - Must be stored:
    + history of moves
    + current board (pieces with positions)
    + game state (turn, castling conditions, pawn "En passant", timers)
+ Add timers for turn, game, ...
+ Support different game modes
+ Reader/writer for Portable Game Notation and Algebraic Notation
